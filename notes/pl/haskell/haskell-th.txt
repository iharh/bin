Articles:
http://www.vittoriozaccaria.net/blog/2014/02/24/towards-template-programming-with-haskell.html
SheardJones - Template Meta-programming in Haskell

Presentations:

Brown - Template Haskell
https://www.cs.kent.ac.uk/people/rpg/cmb21/PTH.pdf

Template Haskell Tutorial slides:
http://www.slideshare.net/kizzx2/template-haskell-tutorial


Tutorials:
https://github.com/leonidas/codeblog/blob/master/2011/2011-12-27-template-haskell.md

UserGuide:
http://www.haskell.org/ghc/docs/latest/html/users_guide/template-haskell.html

Wiki:
http://www.haskell.org/haskellwiki/Template_Haskell
http://en.wikipedia.org/wiki/Template_Haskell

monadloc:
https://github.com/pepeiborra/monadloc
http://hackage.haskell.org/cgi-bin/hackage-scripts/package/monadloc


Every time you want to write something in TH, you start with:

runQ [| ... |]

GHC will tell you how to write it. For example, if we wanted to write a splice that will produce 

\(x,_,_) -> x

$ ghci –fth
> :m +Language.Haskell.TH
> runQ [| \(x,_,_) -> x |]
LamE [TupP [VarP x_1,WildP,WildP]] (VarE x_1)

> :t it
it :: Exp

That’s it, no need to remember anything! Just ask GHC!
