http://www.haskellforall.com/2013/06/the-resource-applicative.html

Tutorials:
http://hackage.haskell.org/packages/archive/pipes/latest/doc/html/Control-Proxy-Tutorial.html
http://hackage.haskell.org/packages/archive/pipes/latest/doc/html/Control-Proxy-Synonym.html

Consumer ... Client (generalizes Consumer)
Producer ... Server (generalizes Producer)

Proxys generalize Pipes because they allow information to flow upstream


http://www.haskellforall.com/2012/08/the-category-design-pattern.html
http://www.haskellforall.com/2012/09/the-functor-design-pattern.html (note: see mmorph also)
http://www.haskellforall.com/2012/09/concurrency-lists-of-kleisli-arrows.html

Type Classes:
+!http://www.haskellforall.com/2012/05/scrap-your-type-classes.html

ADTs, GADTs:
http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers.html
http://www.haskellforall.com/2012/06/gadts.html

Functors:
http://www.haskellforall.com/2011/12/haskell-for-mainstream-programmers-code.html
http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_04.html

Folds (composable auto-strict stuff):
http://www.haskellforall.com/2013/08/composable-streaming-folds.html
http://www.haskellforall.com/2013/08/foldl-100-composable-streaming-and.html

IO monad:
+!http://www.haskellforall.com/2013/01/introduction-to-haskell-io.html

Free monads:
http://www.haskellforall.com/2012/07/purify-code-using-free-monads.html
http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html
http://debasishg.blogspot.com/2013/01/a-language-and-its-interpretation.html

Free transformers:
http://www.haskellforall.com/2013/06/from-zero-to-cooperative-threads-in-33.html
http://www.haskellforall.com/2012/09/the-monadtrans-class-is-missing-method.html
http://www.haskellforall.com/2012/07/free-monad-transformers.html

Continuation monad:
http://www.haskellforall.com/2012/12/the-continuation-monad.html

EitherT-ErrorT:
http://www.haskellforall.com/2013/12/lift-error-handling-with-lens-like.html
http://www.haskellforall.com/2012/07/breaking-from-loop.html
http://www.haskellforall.com/2012/07/errors-10-simplified-error-handling.html
http://stackoverflow.com/questions/14538294/correct-design-for-haskell-exception-handling

Comonads:
http://www.haskellforall.com/2013/02/you-could-have-invented-comonads.html

Pipes:
http://www.haskellforall.com/2014/02/streaming-logging.html
http://www.haskellforall.com/2014/01/stream-fusion-for-pipes.html
http://www.haskellforall.com/2013/10/manual-proofs-for-pipes-laws.html
  https://github.com/Gabriel439/Haskell-Pipes-Library/blob/master/laws.md
http://www.haskellforall.com/2013/09/pipes-40-simpler-types-and-api.html
http://www.haskellforall.com/2013/05/pipes-330-folds-and-uniting-listt-with.html
http://www.haskellforall.com/2013/03/pipes-32-listt-codensity-arrowchoice.html
http://www.haskellforall.com/2013/01/pipes-safe-10-resource-management-and.html
http://www.haskellforall.com/2012/12/pipes-30-simpler-unified-api.html
http://www.haskellforall.com/2012/10/pipes-25-faster-and-slimmer.html
http://www.haskellforall.com/2012/10/pipes-24-proxy-transformers-extra.html
http://www.haskellforall.com/2012/09/pipes-23-bidirectional-pipes.html
http://www.haskellforall.com/2012/07/pipes-21-and-index-core-10-indexed.html
http://www.haskellforall.com/2012/05/pipes-20-pipe-finalization.html
http://www.haskellforall.com/2012/03/haskell-for-purists-pipe-finalization.html
http://www.haskellforall.com/2012/05/conduit-bugs.html

pipes-safe:
http://hackage.haskell.org/packages/archive/pipes-safe/1.0.0/doc/html/Control-Proxy-Safe-Tutorial.html

pipes-concurrency:
http://www.haskellforall.com/2013/06/pipes-concurrency-120-behaviors-and.html
http://www.haskellforall.com/2013/04/pipes-concurrency-100-reactive.html

pipes-parse:
http://www.haskellforall.com/2013/10/how-to-reimplement-conduit-parsing-api.html
http://www.haskellforall.com/2013/06/pipes-parse-100-pushback-delimited.html

pipes-bytestring:
http://www.haskellforall.com/2013/09/perfect-streaming-using-pipes-bytestring.html

io-streams:
http://www.haskellforall.com/2013/04/pipes-and-io-streams.html

Mmorph:
http://www.haskellforall.com/2013/03/mmorph-100-monad-morphisms.html

Lenses:
http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html
http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html

Core:
http://www.haskellforall.com/2012/10/hello-core.html

Serialization:
http://www.haskellforall.com/2012/02/haskell-for-java-programmers.html

Unicode:
http://www.haskellforall.com/2012/01/haskell-for-engineers-unicode.html

Defaults:
http://www.haskellforall.com/2013/04/defaults.html

Test QuickCheck:
http://www.haskellforall.com/2013/11/test-stream-programming-using-haskells.html


Examples:
http://www.haskellforall.com/2012/10/parsing-chemical-substructures.html
http://www.haskellforall.com/2012/01/haskell-for-c-programmers-for-loops.html
http://www.haskellforall.com/2012/08/code-example-1.html

http://stackoverflow.com/questions/14192018/pipes-3-0-non-linear-topologies/
http://stackoverflow.com/questions/14327327/dependency-injection-in-haskell-solving-the-task-idiomatically
http://stackoverflow.com/questions/13920695/what-is-the-connection-between-iteratees-and-frp/

Chemistry:
http://www.haskellforall.com/2013/10/an-all-atom-protein-search-engine.html

Equational Reasoning:
http://www.haskellforall.com/2013/12/equational-reasoning.html

