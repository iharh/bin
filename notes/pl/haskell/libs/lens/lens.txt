Lenses:

Kmett - Lenses Folds and Traversals
  over, both, first
https://github.com/ekmett/lens/wiki (check Derivation)

http://comonad.com/reader/2012/mirrored-lenses/

http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html (https://docs.google.com/file/d/0ByK3AAy5ubqady1YczU2UEYzODQ/edit)
OConnor - Functor is to Lens as Applicative is to Biplate - Introducing Multiplate



http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html
http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html
  http://habrahabr.ru/post/190442/

AdditIO
http://adit.io/posts/2013-07-22-lenses-in-pictures.html

Misc:
http://hackage.haskell.org/package/Clean

fclabels:
Visser - fclabels (https://vimeo.com/41098956)

XML:
http://hackage.haskell.org/package/xml-lens (https://github.com/fumieval/xml-lens)


Samples:

(.~) = over

>(2, 3) & _2 .~ "Hello"
>_2 .~ "Hello" $ (2, 3)
(2, "Hello")

^.
anyOf, both

>anyOf text (== 'c') ("hello"^.packed)
 False

>anyOf (both.text) (== 'c') ("chello"^.packed, "world"^.packed)
 True


>(1, 2)^..both
[1, 2]

>((1, 2), (3, 4))^..traverse.both
[1, 2, 3, 4]

> Left 3 ^? _left
Just 3

> Right 3 ^? _left
Nothing

