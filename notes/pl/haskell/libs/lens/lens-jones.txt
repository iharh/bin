17:17

newtype Identity a = Identity { runIdentity :: a } 

instance Functor Identity where
  fmap f (Identity x) = Identity (f x)


type Lens' s a = forall f. Functor f => (a -> f a) -> s -> f s


set :: forall s a. Lens' s a -> (a -> s -> s)

set ln x s = runIdentity (ln set_fld s)
  where
    set_fld :: a -> Identity a
    set_fld _ = Identity x  -- discard current value, return new value 'x'

-- Edward would write it

const :: a -> b -> a
const x _ = x

set :: forall s a. Lens' s a -> (a -> s -> s)
set ln x = runIdentity . ln (Identity . const x)
