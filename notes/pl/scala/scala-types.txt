Type System:
Galichet - Demystifying Scala Type System - http://www.slideshare.net/dgalichet/demystifying-scala-type-system
http://www.slideshare.net/dhinojosa/scala-demystifyingfunkystuff

Tuples:
(T_1, ..., T_n) is an abbrev for scala.Tuple_n[T_1, ..., T_n)

CBN, CBV:
def someFunc(cbv: Int, cbn: => Int) = ?


Preserve Specific Types:

def foo(s: Seq[A]): Seq[A] = ?
vs.
def foo[T <: Seq[A]](s: T): T = ?


Traits

traits are like an abstract classes (def, val), but cannot have (value) parameters [for c-tors], only classes can.
you can create an object of class and provide "with Trait" for a given object, not a whole class.

Hierarchy:
Any - at the Top
- AnyRef - like a java Object
- AnyVal

...
Nothing - at the bottom of Scala Hierarchy (there is no value of this type).
!  a method which just throws Exception can have type Nothing
Null - subtype of all the reference classes, and also a type of null-value; it is incompatible with AnyVal


Function values of type A => B are treated as objects in Scala:

trait Function1[A, B] {
  def apply(x : A) : B
}


Case classes

Scala automatically adds a companion objects for case-classes (with apply methods which encapsulate new ...).
