"Ihar Hancharenka custom settings
set nocompatible                  " Must come first because it changes other options.
" source $VIMRUNTIME/vimrc_example.vim

"source $VIMRUNTIME/mswin.vim

" for selection in visual/insert mode - http://vim.wikia.com/wiki/Make_C-Left_C-Right_behave_as_in_Windows
behave mswin
 
" SHIFT-Del is Cut
vnoremap <S-Del> "+x
" CTRL-Insert is Copy
vnoremap <C-Insert> "+y
" SHIFT-Insert is Paste
map <S-Insert> "+gP
cmap <S-Insert> <C-R>+
" imap <S-Insert> <C-V>
" vmap <S-Insert> <C-V>

if has('win32') || has('win64')
" for hiding ^M while viewing DOS-files
  set fileformats=dos
  set fileformat=dos
endif

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" fix tab behaviour in normal mode
" Note the extra space after the second \
set list lcs=tab:\ \ 

" autocomplete for help works, but still have problems with file-path-names
"set wildchar=9
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

" pathogen stuff !!!
filetype off
call pathogen#infect() " add string-param if you need to change bundle dir
" !!! currently - clone the following VIM plugins !!!
" git://github.com/altercation/vim-colors-solarized.git
" git://github.com/vim-pandoc/vim-pandoc.git
" git://github.com/derekwyatt/vim-scala.git
" git://github.com/vim-scripts/VimClojure.git

"silent! call pathogen#helptags()
" To rebuild the help tags
"" On Unix:
":helptags ~/.vim/doc
"" On Windows:
":helpt[ags] ~/vimfiles/doc


syntax on                         " Turn on syntax highlighting
filetype plugin indent on         " Turn on file type detection.

"runtime macros/matchit.vim        " Load the matchit plugin.

" backspace and cursor keys wrap to previous/next line
set backspace=indent,eol,start whichwrap+=<,>,[,]
" backspace in Visual mode deletes selection
vnoremap <BS> d

set hidden                        " Handle multiple buffers better.

set ignorecase                    " Case-insensitive searching.
"set smartcase                     " But case-sensitive if expression contains a capital letter.

"set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set nostartofline                 " Do not go to the start of line on scrolling like C-F/C-B/...

set title                         " Set the terminal's title

"set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
"set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
"set tabstop=2                    " Global tab width.
"set shiftwidth=2                 " And again, related.
"set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l-%L,%c-%v\ %)%P

" !!! clojure stuff
"let vimclojure#WantNailgun = 1
"let vimclojure#NailgunClient = "D:/dev/PL/clojure/tools/ng/ng.exe"
"let vimclojure#NailgunServer = "127.0.0.1"
"let vimclojure#NailgunPort = "2113"

let vimclojure#ParenRainbow = 1
let vimclojure#SplitPos = "bottom" " left/right/top/bottom
let vimclojure#SplitSize = 20

" let vimclojure#HighlightBuiltins = 1 " is by default

" !!! vim-pandoc stuff
let g:pandoc_no_folding = 1
" au
" autocmd BufNewFile,BufRead *.txt   set filetype=pandoc

" Or use vividchalk
if has("dialog_gui")
  set background=dark " or light which is by default
  colorscheme solarized
else
  set background=light
  colorscheme far                   " topfunky-light
endif

set autoindent                    " auto-indent
set path=.,,**


" Tell vim to remember certain things when we exit
"  '50  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='50,\"100,:20,%,nD:\\dev\\Utils\\Shell\\Vim\\_viminfo

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END



" Tab mappings.
"map <leader>tt :tabnew<cr>
"map <leader>te :tabedit
"map <leader>tc :tabclose<cr>
"map <leader>to :tabonly<cr>
"map <leader>tn :tabnext<cr>
"map <leader>tp :tabprevious<cr>
"map <leader>tf :tabfirst<cr>
"map <leader>tl :tablast<cr>
"map <leader>tm :tabmove

" Uncomment to use Jamis Buck's file opening plugin
"map <Leader>t :FuzzyFinderTextMate<Enter>


" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" load custom configurations
"  runtime! custom_config/*.gvim*


" :map <silent> <F2> :echo 'Hello!'<CR>
