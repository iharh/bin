"Ihar Hanchrenka custom settings 
set nocp                 " Must come first because it changes other options.
":e $MYVIMRC
":source %

" for selection in visual/insert mode - http://vim.wikia.com/wiki/Make_C-Left_C-Right_behave_as_in_Windows
if has('win32') || has('win64')
    "source $VIMRUNTIME/mswin.vim
    "behave mswin
    let s:vimfilesbase='~/vimfiles/'
else
    let s:vimfilesbase='~/.vim/'
endif
 
" SHIFT-Del is Cut
vnoremap <S-Del> "+x
" CTRL-Insert is Copy
vnoremap <C-Insert> "+y
" SHIFT-Insert is Paste
map <S-Insert> "+gP
cmap <S-Insert> <C-R>+
" imap <S-Insert> <C-V>
" vmap <S-Insert> <C-V>


fun! MyF()
  "let v1 = 'abc'
  "echo v1
  "echo expand("%")
  
  let l:sauce_root='~/.vimsauce/'
  let l:pref_len = strlen(expand(l:sauce_root))
  let l:sauce_files_abs = split(globpath(l:sauce_root, '*.vimrc'), '\n')
  let l:sauce_files_rel = map(l:sauce_files_abs, "strpart(v:val, l:pref_len)")
  let l:sauces = map(l:sauce_files_rel, "strpart(v:val, 0, strlen(v:val) - 6)")
  echo l:sauces
endf

fun! SetCompilerAnt()
  compiler ant
  set makeprg=antcq\ -find\ build.xml
  "errorformat
  set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
endf
call SetCompilerAnt()

set diffexpr=MyDiff()
fun MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff' "we go here since have no spaces at $VIMRUNTIME!
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" fix tab behaviour in normal mode
" Note the extra space after the second \
set list lcs=tab:\ \ 

" autocomplete for help works, but still have problems with file-path-names
"set wildchar=9
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

filet off "filetype

"NeoBundle stuff
"git clone git://github.com/Shougo/neobundle.vim to vimfiles/bundle

if has('vim_starting')
   set nocp " Be iMproved
   " Required:
   let &rtp.=','.s:vimfilesbase.'bundle/neobundle.vim'
endif

call neobundle#rc(expand(s:vimfilesbase . '/bundle'))

NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" if filereadable("${HOME}/.vimrc")
"   source ${HOME}/.vim/plugin-list.vim
" endif
" for CONFIG in split(glob('~/vimfiles/vimrc.d/*.vim'), '\n')
"   exe 'source' CONFIG
"endfor

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc', { 'build' : { 'windows' : 'nmake32-vc100.bat -f make_msvc32.mak nodebug=1' } }
NeoBundle 'iharh/neosauce'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'derekwyatt/vim-scala'
"NeoBundle     'repos-scala/scala-vundle'
"NeoBundleLazy 'derekwyatt/vim-sbt'

syn on                         " (syntax)   - turn on syntax highlighting
filet plugin indent on         " (filetype) - turn on file type detection.

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
NeoBundleCheck

" backspace and cursor keys wrap to previous/next line
set backspace=indent,eol,start whichwrap+=<,>,[,]
" backspace in Visual mode deletes selection
vnoremap <BS> d

set hidden                        " Handle multiple buffers better.

set ignorecase                    " Case-insensitive searching.
"set smartcase                     " But case-sensitive if expression contains a capital letter.

"set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set nostartofline                 " Do not go to the start of line on scrolling like C-F/C-B/...

set title                         " Set the terminal's title

"set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
"set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
"ts tabstop                      " Global tab width.
"sw shiftwidth=2                 " And again, related.
"et expandtab                    " Use spaces instead of tabs

"au[tocmd] setl[ocal] 
au FileType cpp setl sw=4 sts=4 et
au FileType java setl sw=4 sts=4 et
au FileType scala setl sw=4 sts=4 et
au FileType python setl sw=4 sts=4 et
au FileType sql setl sw=4 sts=4 et
au FileType xml setl sw=4 sts=4 et
au FileType txt setl sw=4 sts=4 noeol
au FileType haskell setl sw=4 sts=4 noeol
" for t in ['cpp', 'java', 'sql']  DOES NOT WORK
" endfor

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l-%L,%c-%v\ %)%P

" !!! vim-pandoc stuff
let g:pandoc_no_folding = 1
" au
" autocmd BufNewFile,BufRead *.txt   set filetype=pandoc

" Or use vividchalk
if has("dialog_gui")
  "let g:solarized_termcolors=256
  set background=dark " or light which is by default
  colorscheme solarized
else
  set background=light
  colorscheme far
  "topfunky-light
endif

set autoindent                    " auto-indent
set path=.,,**


" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" This tip is an improved version of the example given for :help last-position-jump.
" It fixes a problem where the cursor position will not be restored if the file only has a single line. 
"
" Tell vim to remember certain things when we exit
"  '50  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='50,\"100,:20,%,n~/_viminfo

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

set tags=./tags;/

" :map <silent> <F2> :echo 'Hello!'<CR>

"Unite settings
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>r :<C-u>Unite -start-insert file_rec<CR>

" Use ag for search
"if executable('ag')
"  let g:unite_source_grep_command = 'ag'
"  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"  let g:unite_source_grep_recursive_opt = ''
"endif


" To rebuild the help tags
":helpt[ags] s:vimfilesbase . doc

" need not to be very early!
if has('win32') || has('win64')
" for hiding ^M while viewing DOS-files
  set fileformats=dos
  set fileformat=dos
endif

"easier buffer/tabs navigation
map <C-J> :bn<CR>
map <C-K> :bp<CR>
map <C-L> :tabn<CR>
map <C-H> :tabp<CR>

" QuickFix navigation
" http://blog.sofistes.net/2013/10/effective-quickfix-window-use-in-vim.html
map <A-p> :cp<CR> 
map <A-n> :cn<CR> 
map <A-P> :colder<CR>
map <A-N> :newer<CR>


